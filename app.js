console.log(`Start`);
const {VK} = require('vk-io');
const vk = new VK({
    token: ``,
    apiLimit: 20,
    apiMode: 'parallel'
});
const request = require('prequest');
let users = require('./database/users.json');
let qiwidon = require('./database/qiwidon.json');
const commands = [];
const groupId = 197613406;
const admin = 312755394;
const {updates, snippets} = vk;
const QIWI = require("@qiwi/bill-payments-node-js-sdk");
const qiwiApi = new QIWI("");
async function saveUsers() {
    require('fs').writeFileSync('./database/users.json', JSON.stringify(users, null, '\t'));
    require('fs').writeFileSync('./database/qiwidon.json', JSON.stringify(qiwidon, null, '\t'));
    return true;
}
const utils = {
    random: (x, y) => {
        return y ? Math.round(Math.random() * (y - x)) + x : Math.round(Math.random() * x);
    }
}
setInterval(async()=>{
    await qiwidon.filter(x=> x.addingAccount == false).map(x=> {
        let user = users.find(q => q.id == x.vkId)
        if (!user) return;
        qiwiApi.getBillInfo(x.billId).then(data => {
            if (data.status.value == "PAID") {
                if (data.comment == "+1") {
                    user.limit += 1;
                }
                x.addingAccount = true;
                vk.api.messages.send({
                    user_id: admin, message: `[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï]
					–ò–≥—Ä–æ–∫: vk.com/id${user.id} –ø—Ä–∏–æ–±—Ä–µ–ª ${data.comment}`, random_id: getRandomId()
                });
                vk.api.messages.send({
                    user_id: user.id, message: `[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï]
					üí∞–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏üí∞
                    üî•${data.comment} –≤—ã–¥–∞–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Çüî•`, random_id: getRandomId()
                });
            }
        });
    });
    },60000);
setInterval(async ()=>{
    await users.filter(x=> x.ban === false && x.token!= null && x.task.length>=1 ).map(x=>{
        x.task.filter(q=>q.active === true && q.timer<=Date.now() && (q.count===-1||q.count>0)).map(q=>{
            const rq  = request(`https://api.vk.com/method/messages.send?peer_id=${q.peerId}&message=${encodeURIComponent(q.msg)}&v=5.126&access_token=${x.token}&random_id=0`).catch((error) => {
                console.log(error);
            });
            if(rq.error.error_code == 5) x.token = null;
            if(!q.rand) q.timer=Date.now()+q.time*1000;
            else q.timer=Date.now()+q.time*1000+utils.random(0,q.time)*1000;
            if(q.count>0)q.count-=1;
        });
    });
},300);
setInterval(async () => {
    await saveUsers();
}, 30000);
const cmd = {
    one: (p, f) => {
        commands.push([p, f]);
    }
}
vk.updates.start().catch(console.error);
updates.on('message_new', async (message) => {
    if (Number(message.senderId) <= 0) return;
    if (/\[club197613406\|(.*)\]/i.test(message.text)) message.text = message.text.replace(/\[club197613406\|(.*)\]/ig, '').trim();

    if (!users.find(x => x.id === message.senderId)) {
        const [user_info] = await vk.api.users.get({user_id: message.senderId});
        const date = new Date();
        users.push({
            id: message.senderId,
            uid: users.length,
            tag: user_info.first_name,
            notification: false,
            token: null,
            limit: 3,
            lvl: 0,
            ban: false,
            task: [],
            current: -1
        })
    }

    message.user = users.find(x => x.id === message.senderId);
    const bot = (text, params) => {
        return message.send(`${message.user.mention ? `@id${message.user.id} (${message.user.tag})` : `${message.user.tag}`}, ${text}`, params);
    }
    const command = commands.find(x => x[0].test(message.text));
    if (!command) {
        if (!message.isChat) return bot(`—Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å ¬´–ø–æ–º–æ—â—å¬ª —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã. üìã `);
        if (message.isChat) return;
    }
    message.args = message.text.match(command[0]);
    await command[1](message, bot);

    const [user_info] = await vk.api.users.get({user_id: message.senderId});
    console.log(`${user_info.first_name} (ID: ${message.user.id}): ${message.text}`)
});
const getRandomId = () => (Math.floor(Math.random() * 10000) * Date.now());
// \s([^]+) \s([0-9]+)\s(.*)
cmd.one(/^(?:–Ω–∞—á–∞—Ç—å|—Ç–æ–∫–µ–Ω|token)$/i, async (message, bot) => {
    return bot(`–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω\n–ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ https://vkhost.github.io/\n –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤—ã–±–∏—Ä–∞–π—Ç–µ kateMobile
    –ó–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É token [—Å—Å—ã–ª–∫–∞/—Ç–æ–∫–µ–Ω], –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –¥–æ–ø.–≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–º–æ—â—å`);
});
cmd.one(/^(?:—Ç–æ–∫–µ–Ω|token)\s([^]+)$/i, async (message, bot) => {
    if(message.args[1].indexOf("https://oauth.vk.com/blank.html#access_token=")!==-1) {
        message.args[1] = message.args[1].substring(message.args[1].indexOf(`=`) + 1, message.args[1].indexOf(`&`))
    }
    const rq = await request(`https://api.vk.com/method/messages.send?peer_id=-${groupId}&message=good&v=5.126&access_token=${message.args[1]}&random_id=0`).catch((error) => {
        return bot(`–°—Å—ã–ª–∫–∞/–¢–æ–∫–µ–Ω –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ!`)
    });
    if (rq.error) return bot(`–°—Å—ã–ª–∫–∞/–¢–æ–∫–µ–Ω –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ!`);
    message.user.token = message.args[1]
});
cmd.one(/^(?:good)$/i, async (message, bot) => {
    return bot(`Hello => –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞`)
});
cmd.one(/^(?:–ø–æ–º–æ—â—å)$/i, async (message, bot) => {
    return bot(`–∫–æ–º–∞–Ω–¥—ã:
        –Ω–∞—á–∞—Ç—å
        —Ç–æ–∫–µ–Ω
        —Ç–æ–∫–µ–Ω [—Ç–æ–∫–µ–Ω/—Å—Å—ã–ª–∫–∞]
        —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç
        –∑–∞–¥–∞–Ω–∏–µ [0-99]
        –∑–∞–¥–∞–Ω–∏–µ [0-99] —É–¥–∞–ª–∏—Ç—å
        –∑–∞–¥–∞–Ω–∏–µ [0-99] –≤–∫–ª/–≤—ã–∫–ª
        –∑–∞–¥–∞–Ω–∏–µ [0-99] —Ç–µ–∫—Å—Ç [—Ç–µ–∫—Å—Ç]
        –∑–∞–¥–∞–Ω–∏–µ [0-99] –≤—Ä–µ–º—è [—á–∞—Å—ã] [–º–∏–Ω—É—Ç—ã] [—Å–µ–∫—É–Ω–¥—ã]
        –∑–∞–¥–∞–Ω–∏–µ [0-99] –ø—É—Ç—å [peerId]
        –∑–∞–¥–∞–Ω–∏–µ [0-99] –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤–∫–ª/–≤—ã–∫–ª
        –∑–∞–¥–∞–Ω–∏–µ [0-99] –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ [0-99]/–≤—ã–∫–ª
        –∑–∞–¥–∞–Ω–∏–µ [0-99] [–ø—É—Ç—å] [—Ç–µ–∫—Å—Ç] [–≤—Ä–µ–º—è-—á] [–≤—Ä–µ–º—è-–º] [–≤—Ä–µ–º—è-—Å]
        –∑–∞–¥–∞–Ω–∏–µ [0-99] [–ø—É—Ç—å] [—Ç–µ–∫—Å—Ç] [–≤—Ä–µ–º—è-—á] [–≤—Ä–µ–º—è-–º] [–≤—Ä–µ–º—è-—Å] [–ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å]
        –∑–∞–¥–∞–Ω–∏–µ [0-99] [–ø—É—Ç—å] [—Ç–µ–∫—Å—Ç] [–≤—Ä–µ–º—è-—á] [–≤—Ä–µ–º—è-–º] [–≤—Ä–µ–º—è-—Å] [–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π]
        –ø–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏
        —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
        —Ä–µ–ø–æ—Ä—Ç [—Å–æ–æ–±—â–µ–Ω–∏–µ]
        –¥–æ–Ω–∞—Ç
        `)
});
cmd.one(/^(?:–∞–ø–æ–º–æ—â—å)$/i, async (message, bot) => {
    if (message.user.id !== admin) return;
    return bot(`–∫–æ–º–∞–Ω–¥—ã:
        –æ—Ç–≤–µ—Ç [—Å–æ–æ–±—â–µ–Ω–∏–µ]
        zz
        –±–∞–Ω/—Ä–∞–∑–±–∞–Ω [–≤–∫–ò–î]
        getToken [–≤–∫–ò–î]
        –ª–∏–º–∏—Ç [id] [–∫–æ–ª-–≤–æ]
        `)
});
cmd.one(/^(?:zz)\s([^]+)$/i, async (message, bot) => {
    if (message.user.id !== admin) return;
    try {
        const result = eval(message.args[1]);
        if (typeof (result) === 'string') {
            return bot(`string: ${result}`);
        } else if (typeof (result) === 'number') {
            return bot(`number: ${result}`);
        } else {
            return bot(`${typeof (result)}: ${JSON.stringify(result, null, '&#12288;\t')}`);
        }
    } catch (e) {
        console.error(e);
        return bot(`–æ—à–∏–±–∫–∞:
		${e.toString()}`);
    }
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([0-9]+)$/i, async (message, bot) => {
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    let task = message.user.task[message.args[2]];
    return bot(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏ ‚Ññ${message.args[2]}:
    Message: ${task.msg},
    PeerId: ${task.peerId},
    Time: ${task.time} —Å–µ–∫,
    Active: ${task.active},
    Random: ${task.rand},
    Count: ${task.count}
    `);
})
cmd.one(/^(?:—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç)$/i, async (message, bot) => {
    if(message.user.task.length>=message.user.limit) return bot(`–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Å–ª–æ—Ç–æ–≤, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞`);
    message.user.current = message.user.task.length;
    await message.user.task.push({
        id: message.user.task.length,
        peerId: message.peerId,
        msg: `test`,
        time: 20,
        timer: Date.now() + 20*1000,
        active: false,
        rand: false,
        count: -1
    });

    return bot(`—Å–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É–∫–∞–∑–∞–≤ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏`,{
        keyboard: JSON.stringify(
            {
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            "payload": "{}",
                            "label": "–í—Ä–µ–º—è"
                        },
                        "color": "positive"
                    },
                        {
                            "action": {
                                "type": "text",
                                "payload": "{}",
                                "label": "–°–æ–æ–±—â–µ–Ω–∏–µ"
                            },
                            "color": "positive"
                        }],
                    [{
                        "action": {
                            "type": "text",
                            "payload": "{}",
                            "label": "–†–∞–Ω–¥–æ–º"
                        },
                        "color": "positive"
                    },
                        {
                            "action": {
                                "type": "text",
                                "payload": "{}",
                                "label": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                            },
                            "color": "positive"
                        }],
                    [{
                        "action": {
                            "type": "text",
                            "payload": "{}",
                            "label": "PeerId"
                        },
                        "color": "positive"
                    },
                        {
                            "action": {
                                "type": "text",
                                "payload": "{}",
                                "label": "–í–∫–ª—é—á–∏—Ç—å"
                            },
                            "color": "positive"
                        }]
                ]
            })
    });
});
cmd.one(/^(?:–í–∫–ª—é—á–∏—Ç—å)$/i, async (message, bot) => {
    if(message.user.current != -1) {
        message.user.task[message.user.current].active = message.user.task[message.user.current].active?false:true;
        let text = message.user.task[message.user.current].active ? `–í–∫–ª—é—á–µ–Ω–æ` : `–í—ã–∫–ª—é—á–µ–Ω–æ`;
        return bot(text);
    }else{
        return bot(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
});

cmd.one(/^(?:PeerId)$/i, async (message, bot) => {
    if(message.user.current != -1) {
        let text = message.user.task[message.user.current].peerId;
        return bot(`—Ç–µ–∫—É—â–∏–π PeerId - ${text}, –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "id [PeerId —Ü–µ–ª–∏]"`);
    }else{
        return bot(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
});
cmd.one(/^(?:id)\s([^]+)$/i, async (message, bot) => {
    if(message.user.current != -1) {
        if (Number(message.args[1])) {
            message.user.task[message.user.current].peerId = message.args[1];
            return bot(`–ü—É—Ç—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${message.args[1]}`);
        }else{
            return bot(`–æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        }
    }else{
        return bot(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
});
cmd.one(/^(?:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ)$/i, async (message, bot) => {
    if(message.user.current != -1) {
        let text= message.user.task[message.user.current].count===-1?`–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ`:`${message.user.task[message.user.current].count}`;
        return bot(`—Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ - ${text}, –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–ª-–≤–∞ –≤–≤–µ–¥–∏—Ç–µ "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ [–∫–æ–ª-–≤–æ]"`);
    }else{
        return bot(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
});
cmd.one(/^(?:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ)\s([^]+)$/i, async (message, bot) => {
    if(message.user.current != -1) {
        if (Number(message.args[1])) {
            if(message.args[1]<-1) return bot(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`);
            message.user.task[message.user.current].count = message.args[1];
            return bot(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${message.args[1]}`);
        }else{
            return bot(`–æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        }
    }else{
        return bot(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
});
cmd.one(/^(?:–†–∞–Ω–¥–æ–º)$/i, async (message, bot) => {
    if(message.user.current != -1) {
        message.user.task[message.user.current].rand = message.user.task[message.user.current].rand?false:true;
        let text = message.user.task[message.user.current].rand ? `–í–∫–ª—é—á–µ–Ω–æ` : `–í—ã–∫–ª—é—á–µ–Ω–æ`;
        return bot(text);
    }else{
        return bot(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
});
cmd.one(/^(?:–°–æ–æ–±—â–µ–Ω–∏–µ)$/i, async (message, bot) => {
    if(message.user.current != -1) {
        return bot(`—Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - ${message.user.task[message.user.current].msg}, –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "–°–æ–æ–±—â–µ–Ω–∏–µ [—Ç–µ–∫—Å—Ç]"`);
    }else{
        return bot(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
});
cmd.one(/^(?:–°–æ–æ–±—â–µ–Ω–∏–µ)\s([^]+)$/i, async (message, bot) => {
    if(message.user.current != -1) {
            message.user.task[message.user.current].msg = message.args[1];
            return bot(`–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${message.args[1]}`);
    }else{
        return bot(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
});
cmd.one(/^(?:–í—Ä–µ–º—è)$/i, async (message, bot) => {
    if(message.user.current != -1) {
        return bot(`—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - ${message.user.task[message.user.current].time} —Å–µ–∫—É–Ω–¥, –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "–í—Ä–µ–º—è [–°–µ–∫—É–Ω–¥—ã]"`);
    }else{
        return bot(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
});
cmd.one(/^(?:–í—Ä–µ–º—è\s([^]+))$/i, async (message, bot) => {
    if(message.user.current != -1) {
        if (Number(message.args[1])) {
            if(message.args[1]<15) return bot(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,—É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 15 —Å–µ–∫—É–Ω–¥–∞–º`);
            message.user.task[message.user.current].time = message.args[1];
            return bot(`–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${message.args[1]} —Å–µ–∫—É–Ω–¥`);
        }else{
            return bot(`–æ—à–∏–±–∫–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        }
    }else{
        return bot(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([0-9]+)\s(–≤–∫–ª|–≤—ã–∫–ª)$/i, async (message, bot) => {
    message.user.current = -1;
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    if(message.args[3]==`–≤–∫–ª`)message.user.task[message.args[2]].active = true;
    if(message.args[3]==`–≤—ã–∫–ª`)message.user.task[message.args[2]].active = false;
    return bot(`–ó–∞–¥–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ`)
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([0-9]+)\s(–ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å)\s(–≤–∫–ª|–≤—ã–∫–ª)$/i, async (message, bot) => {
    message.user.current = -1;
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    if(message.args[4]==`–≤–∫–ª`)message.user.task[message.args[2]].rand = true;
    if(message.args[4]==`–≤—ã–∫–ª`)message.user.task[message.args[2]].rand = false;
    return bot(`–†–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ`);
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([0-9]+)\s(—Ç–µ–∫—Å—Ç)\s([^]+)$/i, async (message, bot) => {
    message.user.current = -1;
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    message.user.task[message.args[2]].msg = message.args[4];
    return bot(`–¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω`);
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([0-9]+)\s(–≤—Ä–µ–º—è)\s([0-9]+)\s([0-9]+)\s([0-9]+)$/i, async (message, bot) => {
    message.user.current = -1;
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    if(message.args[6]>=60)message.args[6] = 59;
    if(message.args[5]>=60)message.args[5] = 59;
    if(message.args[4]>=24)message.args[4]= 23;
    if(Number(Number(message.args[6])+Number(message.args[5])*60+Number(message.args[4])*3600)<15) return bot(`–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è 15 —Å–µ–∫—É–Ω–¥`);
    message.user.task[message.args[2]].time=Number(Number(message.args[6])+Number(message.args[5])*60+Number(message.args[4])*3600);
    return bot(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω`);
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([0-9]+)\s(–ø—É—Ç—å)\s([^]+)$/i, async (message, bot) => {
    message.user.current = -1;
    if(!Number(message.args[4]))return bot(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`);
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    message.user.task[message.args[2]].peerId = message.args[4];
    return bot(`–ü—É—Ç—å –∏–∑–º–µ–Ω–µ–Ω`);
});
cmd.one(/^(?:—Ä–µ–ø–æ—Ä—Ç|–∂–∞–ª–æ–±–∞)\s([^]+)$/i, async (message, bot) => {
    message.user.current = -1;
    vk.api.messages.send({
        peer_id: admin, forward_messages: message.id, message: `[‚õî] –ù–û–í–´–ô –†–ï–ü–û–†–¢ ¬ª
	- üë§ –ò–≥—Ä–æ–∫: @id${message.user.id}(${message.user.tag})
	- üìå ID: ${message.user.id}
	- üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message.args[1]}
	- üî• –û—Ç–≤–µ—Ç [id] [—Ç–µ–∫—Å—Ç]`, random_id: getRandomId()
    });
    return bot(`‚úÖ–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
});
cmd.one(/^(?:–æ—Ç–≤–µ—Ç)\s([0-9]+)\s([^]+)$/i, async (message, bot) => {
    message.user.current = -1;
    if (message.user.id !== admin) return;
    const user = await users.find(x => x.id === Number(message.args[1]));
    if (!user) return;
    await vk.api.messages.send({
        user_id: user.id,
        message: `‚úÖ–ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ä–µ–ø–æ—Ä—Ç\nüí¨ –û—Ç–≤–µ—Ç: ${message.args[2]}`,
        random_id: getRandomId()
    });
    return bot(`‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ä–µ–ø–æ—Ä—Ç\n.`);
});
cmd.one(/^(?:–±–∞–Ω)\s([0-9]+)$/i, async (message, bot) => {
    message.user.current = -1;
    if (message.user.id !== admin) return;
    const user = await users.find(x => x.id === Number(message.args[1]));
    if (!user) return;
    user.ban = true;
    await vk.api.messages.send({
        user_id: user.id,
        message: `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`,
        random_id: getRandomId()
    });
    return bot(`‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
});
cmd.one(/^(?:gettoken)\s([0-9]+)$/i, async (message, bot) => {
    message.user.current = -1;
    if (message.user.id !== admin) return;
    const user = await users.find(x => x.id === Number(message.args[1]));
    if (!user) return;
    return bot(`${user.token}`);
});
cmd.one(/^(?:—Ä–∞–∑–±–∞–Ω)\s([0-9]+)$/i, async (message, bot) => {
    message.user.current = -1;
    if (message.user.id !== admin) return;
    const user = await users.find(x => x.id === Number(message.args[1]));
    if (!user) return;
    user.ban = false;
    await vk.api.messages.send({
        user_id: user.id,
        message: `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`,
        random_id: getRandomId()
    });
    return bot(`‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([^]+)\s([^]+)\s([^]+)\s([0-9]+)\s([0-9]+)\s([0-9]+)\s(–≤–∫–ª|–≤—ã–∫–ª)$/i, async (message, bot) => {
    message.user.current = -1;
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    if(!Number(message.args[3]))return bot(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Ç–∏`);
    if(!Number(message.args[5]))return bot(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ`);
    if(!Number(message.args[6]))return bot(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ`);
    if(!Number(message.args[7]))return bot(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ`);
    if(message.args[7]>=60)message.args[7] = 59;
    if(message.args[6]>=60)message.args[6] = 59;
    if(message.args[5]>=24)message.args[5]= 23;
    if(Number(Number(message.args[7])+Number(message.args[6])*60+Number(message.args[5])*3600)<15) return bot(`–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è 15 —Å–µ–∫—É–Ω–¥`);
    message.user.task[message.args[2]].time=Number(Number(message.args[7])+Number(message.args[6])*60+Number(message.args[5])*3600);
    message.user.task[message.args[2]].msg = message.args[4];
    message.user.task[message.args[2]].peerId = message.args[3];
    if(message.args[8]===`–≤–∫–ª`)message.user.task[message.args[2]].rand = true;
    if(message.args[8]===`–≤—ã–∫–ª`)message.user.task[message.args[2]].rand = false;
    return bot(`–ó–∞–¥–∞–Ω–∏–µ ${message.args[2]} –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ`);
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([^]+)\s([^]+)\s([^]+)\s([0-9]+)\s([0-9]+)\s([0-9]+)\s([0-9]+)$/i, async (message, bot) => {
    message.user.current = -1;
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    if(!Number(message.args[3]))return bot(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Ç–∏`);
    if(!Number(message.args[5]))return bot(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ`);
    if(!Number(message.args[6]))return bot(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ`);
    if(!Number(message.args[7]))return bot(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ`);
    if(message.args[7]>=60)message.args[7] = 59;
    if(message.args[6]>=60)message.args[6] = 59;
    if(message.args[5]>=24)message.args[5]= 23;
    if(Number(Number(message.args[7])+Number(message.args[6])*60+Number(message.args[5])*3600)<15) return bot(`–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è 15 —Å–µ–∫—É–Ω–¥`);
    if(!Number(message.args[8])){
        if(message.args[8]==`–≤—ã–∫–ª`) message.user.task[message.args[2]].count=-1;
        else return bot(`–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤—ã–∫–ª`);
    }else{
        message.user.task[message.args[2]].count=Number(message.args[8]);
    }
    message.user.task[message.args[2]].time=Number(Number(message.args[7])+Number(message.args[6])*60+Number(message.args[5])*3600);
    message.user.task[message.args[2]].msg = message.args[4];
    message.user.task[message.args[2]].peerId = message.args[3];
    return bot(`–ó–∞–¥–∞–Ω–∏–µ ${message.args[2]} –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ`);
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([^]+)\s([^]+)\s([^]+)\s([0-9]+)\s([0-9]+)\s([0-9]+)$/i, async (message, bot) => {
    message.user.current = -1;
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    if(!Number(message.args[3]))return bot(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Ç–∏`);
    if(!Number(message.args[5]))return bot(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ`);
    if(!Number(message.args[6]))return bot(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ`);
    if(!Number(message.args[7]))return bot(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ`);
    if(message.args[7]>=60)message.args[7] = 59;
    if(message.args[6]>=60)message.args[6] = 59;
    if(message.args[5]>=24)message.args[5]= 23;
    if(Number(Number(message.args[7])+Number(message.args[6])*60+Number(message.args[5])*3600)<15) return bot(`–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è 15 —Å–µ–∫—É–Ω–¥`);
    message.user.task[message.args[2]].time=Number(Number(message.args[7])+Number(message.args[6])*60+Number(message.args[5])*3600);
    message.user.task[message.args[2]].msg = message.args[4];
    message.user.task[message.args[2]].peerId = message.args[3];
    return bot(`–ó–∞–¥–∞–Ω–∏–µ ${message.args[2]} –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ`);
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([0-9]+)\s(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)\s([0-9]+)$/i, async (message, bot) => {
    message.user.current = -1;
    if(!Number(message.args[4]))return bot(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`);
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    message.user.task[message.args[2]].count=message.args[4];
    return bot(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ`);
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([0-9]+)\s(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)\s(–≤—ã–∫–ª)$/i, async (message, bot) => {
    message.user.current = -1;
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    message.user.task[message.args[2]].count=-1;
    return bot(`–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—å—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ`);
});
cmd.one(/^(?:—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π)$/i, async (message, bot) => {
    message.user.current = -1;
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    let text = `\nid|—Å–æ–æ–±—â–µ–Ω–∏–µ|–∏–Ω—Ç–µ—Ä–≤–∞–ª|–∞–∫—Ç–∏–≤|—Ä–∞–Ω–¥–æ–º|–∫–æ–ª-–≤–æ\n\n`;
    message.user.task.map(x=>{
        text+=`${x.peerId}|${x.msg}|${x.time}|${x.active}|${x.rand}|${x.count}\n`;
    })
    text+= `\nInfo: true - –≤–∫–ª—é—á–µ–Ω–æ, false-–≤—ã–∫–ª—é—á–µ–Ω–æ, –µ—Å–ª–∏ –∫–æ–ª-–≤–æ -1, —Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –µ—Å–ª–∏ –±–æ–ª—å—à–µ, —Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —Ä–∞–∑, –ø–æ–∫–∞–∑–∞–Ω–æ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`;
    return bot(`${text}`)
});
cmd.one(/^(?:–ª–∏–º–∏—Ç)\s([0-9]+)\s([0-9]+)$/i, async (message, bot) => {
    message.user.current = -1;
    if (message.user.id !== admin) return;
    let user = users.filter(x=>x.id == message.args[1]);
    if(!user) return bot(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    if(Number(message.args[2])<0)return bot(`–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ`);
    user.limit=Number(message.args[2]);
    return bot(`–õ–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω`)
});
cmd.one(/^(?:–ø–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏)$/i, async (message, bot) => {
    message.user.current = -1;
    const rq  = await request(`https://api.vk.com/method/messages.getConversations?offset=0&count=10&v=5.126&filter=all&access_token=${message.user.token}`).catch((error) => {
        console.log(error);
    });
    console.log(rq.response);
    if (rq.error) return bot(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ—Å–µ–¥`);
    let text = ``;
    let cc = 0;
    for(let i = 0;i<10;i++){
        if(rq.response.items[i]) {
            console.log(rq.response.items[i])
            if (rq.response.items[i].conversation.peer.type === `chat`) {
                text += `${rq.response.items[i].conversation.peer.id}|${rq.response.items[i].conversation.chat_settings.title}\n`
                cc++;
            }
            if (cc === 10) break;
        }
    }
    return bot(`${text}\n –ø—É—Ç—å –∫ –±–µ—Å–µ–¥–µ|–Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã\n–í –≤—ã–±–æ—Ä–∫–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –±–µ—Å–µ–¥—ã –∏–∑ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤`);
});
cmd.one(/^(?:–∑–∞–¥–∞–Ω–∏(–µ|—è))\s([0-9]+)\s(—É–¥–∞–ª–∏—Ç—å)$/i, async (message, bot) => {
    message.user.current = -1;
    if(message.user.task.length===0) return bot(`–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç"`);
    if((Number(message.args[2])>=message.user.task.length)||(Number(message.args[2])<0))return bot(`–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${message.user.task.length-1}`);
    if(message.args[2]>=0 && message.args[2]<message.user.task.length){
        message.user.task.splice(message.args[2], 1);
        return bot(`–∑–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ`);
    }else{
        return bot(`–∑–∞–¥–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
});
    cmd.one(/^(?:–¥–æ–Ω–∞—Ç)$/i, async (message, bot) => {
        message.user.current = -1;
        return bot(`–¥–æ–Ω–∞—Ç-–º–∞–≥–∞–∑–∏–Ω: 
	1&#8419; –õ–∏–º–∏—Ç –∑–∞–¥–∞–Ω–∏–π +1 | 50 RUB 
	2&#8419; –õ–∏–º–∏—Ç –∑–∞–¥–∞–Ω–∏–π +2 | 90 RUB 
	3&#8419; –õ–∏–º–∏—Ç –∑–∞–¥–∞–Ω–∏–π +3 | 120 RUB 
  
	–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–î–æ–Ω–∞—Ç [–Ω–æ–º–µ—Ä]".\n–ü—Ä–∏–º–µ—Ä: "–î–æ–Ω–∞—Ç 1"\n
	–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ä–µ–ø–æ—Ä—Ç`);
});
cmd.one(/^(?:–¥–æ–Ω–∞—Ç)\s(1)$/i, async (message, bot) => {
    message.user.current = -1;
    let bill = qiwiApi.generateId();
    qiwidon.push({
        amount: 1,
        billId: bill,
        comment: "+1",
        currency: "RUB",
        vkId: message.senderId,
        addingAccount: false
    });
    let qd = qiwidon.find(x=> x.billId == bill);
    if(!qd)return bot(`–û—à–∏–±–∫–∞`);
    await qiwiApi.createBill(bill, qd).then(data => {
        return bot(`‚ö°–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:\n${data.payUrl}\n‚ö°–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: ${qd.amount} `);
    })
});

